### REQUIRES CONFIGURATION TEMPLATE VERSION: 0.6

###_______________  LH STINGER PICO MMU  _____________________
### Do not edit or include this file into printer.cfg




#### ------ BOOT INIT ----------


[delayed_gcode _SP_BOOT]
initial_duration: 3
gcode:
  {% set sp = printer['gcode_macro _SP_VARS'] %}
  {% if sp.enabled == 1 %}
    RESPOND MSG="---- LH Stinger Pico MMU Enabled ----"
    RESPOND MSG=""

    {% if printer.save_variables.variables.last_lane != -1 %}
      RESPOND MSG="SP: Loaded Extruder Lane saved: {printer.save_variables.variables.last_lane}"
    {% else %}
      RESPOND MSG="SP: No loaded LANE saved in memory"
    {% endif %}
    
     RESPOND MSG="SP: Initializing LH Stinger Pico MMU"
    SP_INIT
    _CHECK_SETTINGS_VERSION_SP
  {% endif %}



[gcode_macro SP_INIT]
gcode:
  {% set sp = printer['gcode_macro _SP_VARS'] %}
  SET_FILAMENT_SENSOR SENSOR=sp_sensor_runout ENABLE=0
  
  {% if printer['gcode_button sp_sensor'].state == 'PRESSED' %}
    RESPOND MSG="SP: Inserted filament detected"
    SET_GCODE_VARIABLE MACRO=_SP_VARS_RUNTIME VARIABLE=is_filament_in VALUE=1

    {% if printer.save_variables.variables.last_lane == -1  %}
      RESPOND MSG="SP: WARNING! Unknown LANE loaded! Please verify your system and use SP_FORCE_SET_LANE LANE=<0...> to manually set the loaded lane"
      RESPOND MSG="SP: WARNING! Defaulting to LANE 0! Please correct if not accurate!"
      SAVE_VARIABLE VARIABLE=last_lane VALUE=0
    {% else %}
    RESPOND MSG="SP: Loaded LANE {printer.save_variables.variables.last_lane} "  
    {% endif %}

  {% else %}
      {% if printer.save_variables.variables.last_lane != -1  %}
        RESPOND MSG="SP: WARNING! Last set LANE was {printer.save_variables.variables.last_lane}, but no filament is detected! Resetting lane memory"
      {% endif %}

      SAVE_VARIABLE VARIABLE=last_lane VALUE=-1
      SAVE_VARIABLE VARIABLE=hotend_loaded VALUE=0
      SET_GCODE_VARIABLE MACRO=_SP_VARS_RUNTIME VARIABLE=is_filament_in VALUE=0
      RESPOND MSG="SP: Filament not present in the hotend"             
  {% endif %}

  SP_HOME
  SP_CLEAR_ERROR_CODES 
  _SP_RESET_VARIABLES




### The macro below is broken into A B parts to obtain refreshed variables for error checking
[gcode_macro _SP_PRINT_START]
gcode:
  {% set lane = params.LANE| default(-1) | int %}
  {% set temp = params.TEMP| default(-1) | int %}
  {% set unload_lane = printer.save_variables.variables.last_lane | default(-1) | int %}
  {% set sp = printer['gcode_macro _SP_VARS'] %}
  CLEAR_PAUSE
   
  {% if sp.enabled == 1  %}
    RESPOND MSG="SP: Print Start - Resetting the SP MMU"    
    SP_INIT
  
    {% if lane+1 <= sp.lanes and lane >= 0 %}
   
      {% if lane != unload_lane %}        
        RESPOND MSG="SP: ----- Filament Change: LANE {unload_lane} >>>> LANE {lane} ----- "
 
        ### Filament Change Routine
        _SP_SET_EXIT_CODE CODE=1       
        _SP_FILAMENT_CHANGE UNLOAD_LANE={unload_lane} LOAD_LANE={lane} TEMP={temp} PURGE={sp.print_start_change_purge} 
        
        _SP_REFRESH_STATE
        _SP_PRINT_START_B
        
       {% else %}
          RESPOND MSG="SP: No filament change required"             
          RESPOND MSG="SP: Starting print with LANE {lane}"
          SP_CLEAR_ERROR_CODES
       {% endif %}
       
     {% else %}
       RESPOND TYPE=error MSG="SP: ERROR: Invalid LANE inputs. LANE {unload_lane} and loading LANE {lane}"
       _SP_SET_EXIT_CODE CODE=1
     {% endif %}
     
  {% else %}
    RESPOND MSG="The SP MMU is not enabled for this print"
  {% endif %}



[gcode_macro _SP_PRINT_START_B]
gcode:
  {% set sp = printer['gcode_macro _SP_VARS'] %}
  {% set rt = printer['gcode_macro _SP_VARS_RUNTIME'] %}
  
  {% if sp.enabled == 1 %}
    {% if rt.exit_code == 0 %}
      RESPOND MSG="SP: Continuing. Please wait"
    {% else %}
      RESPOND TYPE=error MSG="SP: Turning off hotend and PAUSING"
      M104 S0 # Turn off hotend for safety
      SP_HOME
      PAUSE
    {% endif %}  
  {% endif %} 



[gcode_macro _SP_PRINT_END]
gcode:
  RESPOND MSG="SP: ---- Print Ended ----"
  RESPOND MSG="SP: Resetting LH Stinger Pico MMU "
  RESPOND MSG=""
  _SP_SHOW_STATISTICS
  SP_INIT


  
#### ------ TOOL CHANGES ----------



[gcode_macro T0]
gcode:
  _SP_TOOL_CHANGE LANE=0

[gcode_macro T1]
gcode:
  _SP_TOOL_CHANGE LANE=1

[gcode_macro T2]
gcode:
  _SP_TOOL_CHANGE LANE=2

[gcode_macro T3]
gcode:
  _SP_TOOL_CHANGE LANE=3

[gcode_macro T4]
gcode:
  _SP_TOOL_CHANGE LANE=4

[gcode_macro T5]
gcode:
  _SP_TOOL_CHANGE LANE=5

[gcode_macro T6]
gcode:
  _SP_TOOL_CHANGE LANE=6



### Implementation for RatOS T0 conflict
### Comment the T macros above
### In Orca Slicer add Change filament G-code: SP_CHANGE T=[next_extruder]
[gcode_macro SP_CHANGE]
gcode:   
  _SP_TOOL_CHANGE LANE={params.T|int}



[gcode_macro _SP_TOOL_CHANGE]
gcode:
  {% set sp = printer['gcode_macro _SP_VARS'] %}
  {% set rt = printer['gcode_macro _SP_VARS_RUNTIME'] %}
  
  {% if sp.enabled == 1 %}
    {% if params.LANE %}
      {% set lane = params.LANE | int %}
      {% set unload_lane = printer.save_variables.variables.last_lane | default(-1) | int %}
  
      {% if lane != unload_lane %}          
        {% if rt.active != 1  %} 
          RESPOND MSG="SP: MMU not active yet. Initializing the SP MMU"
          SP_INIT
        {% endif %}     

        # Main pause that starts the change
        _SP_PAUSE LANE={lane}  
     
      {% else %}
        RESPOND MSG="SP: LANE {lane} already loaded. No change required"
      {% endif %} 

    {% else %}
      RESPOND TYPE=error MSG="SP: LANE parameter missing"
    {% endif %}
    
  {% endif %}




#### ------ MANUAL COMMANDS ----------


[gcode_macro SP_FORCE_SET_LOADED_LANE]
gcode:
  {% if params.LANE %}
    SAVE_VARIABLE VARIABLE=last_lane VALUE={params.LANE | int}
  {% else %}
    RESPOND TYPE=error MSG="SP: LANE parameter missing. Run again with LANE=<0...> or LANE=-1 for no loaded lane"
  {% endif %}

  

[gcode_macro SP_FORCE_SET_HOTEND_LOADED]
gcode:
  {% if params.VALUE %}
    SAVE_VARIABLE VARIABLE=hotend_loaded VALUE={params.VALUE | int}
  {% else %}
    RESPOND TYPE=error MSG="SP: VALUE. Run again with VALUE=<0/1>"
  {% endif %}



[gcode_macro SP_FORCE_MOVE_LANE]
gcode:
  {% set sp = printer['gcode_macro _SP_VARS'] %}
  {% set rt = printer['gcode_macro _SP_VARS_RUNTIME'] %}
  {% set dist = params.DIST|default(-40) | int %}
  
  {% if rt.selected_lane >= 0 and not params.LANE %}
     RESPOND MSG="SP: Moving previously selected lane. LANE: {rt.selected_lane} "
     _SP_LANE_SELECT LANE={rt.selected_lane}
     _SP_MOTOR {rawparams} STOP=0 DIST={dist}
  
  {% else %}
    {% if params.LANE %}
    _SP_LANE_SELECT LANE={params.LANE | int}
    _SP_MOTOR {rawparams} STOP=0 DIST={dist}
  
    {% else %}
      RESPOND TYPE=error MSG="SP: LANE parameter missing. Run again with LANE=<0...> "
    {% endif %}
  
  {% endif %}
  


[gcode_macro SP_SET_ANGLE_OFFSET]
gcode:
  {% set sp = printer['gcode_macro _SP_VARS'] %}
  {% set rt = printer['gcode_macro _SP_VARS_RUNTIME'] %}
  SET_GCODE_VARIABLE MACRO=_SP_VARS VARIABLE=angle_offset VALUE={params.VALUE|float}
  _SP_SERVO ANGLE={rt.commanded_angle}



[gcode_macro SP_LOAD_EXTRUDER]
gcode:
  {% set tmp = params.LANE %}
  SP_CLEAR_ERROR_CODES
  _SP_LOAD_EXTRUDER {rawparams}
  SP_HOME



[gcode_macro SP_UNLOAD_EXTRUDER]
gcode:
  {% set lane = params.LANE | default(printer.save_variables.variables.last_lane) | int %}  
  
  {% if lane >= 0 %}
    SP_CLEAR_ERROR_CODES  
    _SP_UNLOAD_EXTRUDER LANE={lane}
    SP_HOME

  {% else %}
    RESPOND TYPE=error MSG="SP: LANE parameter missing or invalid. Run again with LANE=<0...>"
  {% endif %}



[gcode_macro SP_LOAD_HOTEND]
gcode:
  {% set tmp = params.TEMP %}
  SP_CLEAR_ERROR_CODES
  _SP_LOAD_HOTEND {rawparams} FORCE=1
  SP_HOME



[gcode_macro SP_UNLOAD_HOTEND]
gcode:
  {% set lane = params.LANE | default(printer.save_variables.variables.last_lane) | int %}  
  
  {% if lane >= 0 %}
    SP_CLEAR_ERROR_CODES
    _SP_UNLOAD_HOTEND LANE={lane} FORCE=1

  {% else %}
    RESPOND TYPE=error MSG="SP: LANE parameter missing or invalid. Run again with LANE=<0...>"
  {% endif %}



[gcode_macro SP_LOAD_LANE]
gcode:
  {% if params.LANE%}
    
    SP_CLEAR_ERROR_CODES
    _SP_LOAD_LANE LANE={params.LANE} FORCE=1
    

  {% else %}
    RESPOND TYPE=error MSG="SP: LANE parameter missing. Run again with LANE=<0...>"
  {% endif %}



[gcode_macro SP_UNLOAD_LANE]
gcode:
  {% set lane = params.LANE | default(printer.save_variables.variables.last_lane) | int %}
  {% set sp = printer['gcode_macro _SP_VARS'] %}  
  
  {% if lane >= 0 %}
    
    # Simulating pause retract to get more accurate tip forming samples 
    {% if sp.pause_retract != 0 and printer[printer.toolhead.extruder].can_extrude == True %}
      RESPOND MSG="SP: Simulating pause retract"
      M83
      G0 E-{sp.pause_retract|float|abs} F{60*35}   # Retract 
    {% endif %}

    SP_CLEAR_ERROR_CODES
    _SP_UNLOAD_LANE LANE={lane} FORCE=1
    SP_HOME

  {% else %}
    RESPOND TYPE=error MSG="SP: LANE parameter missing or invalid. Run again with LANE=<0...>"
  {% endif %}



[gcode_macro SP_FILAMENT_CHANGE]
gcode:
  {% set sp = printer['gcode_macro _SP_VARS'] %}
  {% set unload_lane = params.UNLOAD_LANE | default(printer.save_variables.variables.last_lane) | int %}
  {% set load_lane = params.LOAD_LANE | int %}
  
  
  {% if unload_lane >= 0 and load_lane >=0 %}
    _SP_FILAMENT_CHANGE UNLOAD_LANE={unload_lane} LOAD_LANE={load_lane} PURGE={sp.print_start_change_purge}       
    
  {% else %}
    RESPOND TYPE=error MSG="SP: UNLOAD_LANE or LOAD_LANE parameters missing. Run again with UNLOAD_LANE=<0...> LOAD_LANE=<0...>"
  {% endif %}



[gcode_macro RESUME]
rename_existing: RESUME_BASE
gcode:
    {% set sp = printer['gcode_macro _SP_VARS'] %}
    {% set rt = printer['gcode_macro _SP_VARS_RUNTIME'] %}
    
    RESPOND MSG="SP: Resuming Print"
    RESUME_BASE
    CLEAR_PAUSE
    
    {% if rt.sp_pause == 1 %} 
      _SP_RESUME
    {% endif %}
    




#### ------ LOADING UNLOADING HUB ----------


[gcode_macro SP_LOAD_HUB]
gcode:
  _SP_SET_EXIT_CODE CODE=1
  {% set sp = printer['gcode_macro _SP_VARS'] %}
  {% set rt = printer['gcode_macro _SP_VARS_RUNTIME'] %}

  {% if params.LANE %}
  RESPOND MSG="SP: Loading LANE {params.LANE} into the HUB ..."
  
    {% if rt.is_filament_in != 1 %}
  
      RESPOND MSG="SP: Please wait for end message. This might take a bit after the full movement finishes..."
      _SP_LANE_SELECT LANE={params.LANE | int}
      _SP_MOTOR STOP=1 SYNC=1 DIST={sp.dist_mmu_to_hub+sp.overshoot_hub_distance+sp.dist_hub_to_sensor} SPEED={sp.speed_mmu_to_hub}
  
      RESPOND MSG="SP: LANE {params.LANE} feed has reached the HUB sensor. Parking the filament into the HUB"
      _SP_MOTOR STOP=0 DIST=-{sp.dist_hub_to_sensor}
      SP_CLEAR_ERROR_CODES

    {% else %}
      _SP_LANE_SELECT LANE={params.LANE | int}
      _SP_MOTOR STOP=0 DIST={sp.dist_mmu_to_hub}
      RESPOND MSG="SP: LANE {params.LANE} loaded for specified distance"
      _SP_SET_EXIT_CODE CODE=10
    {% endif %}
  
  {% else %}
    RESPOND TYPE=error MSG="SP: LANE parameter missing. Run again with LANE=<0...>"
  {% endif %}



[gcode_macro SP_UNLOAD_HUB]
gcode:
  {% set force = params.FORCE | default(0) | int %}
  {% set sp = printer['gcode_macro _SP_VARS'] %}
  {% set rt = printer['gcode_macro _SP_VARS_RUNTIME'] %}
  _SP_SET_EXIT_CODE CODE=1
  
  {% if params.LANE %}
    RESPOND MSG="SP: Unloading LANE {params.LANE} from the HUB ..."
  
    {% if rt.is_filament_in != 1 or params.LANE | int != printer.save_variables.variables.last_lane or printer.save_variables.variables.last_lane == -1 or force == 1 %}
      _SP_LANE_SELECT LANE={params.LANE | int}
      _SP_MOTOR STOP=0 DIST=-{sp.dist_mmu_to_hub} SPEED={sp.speed_mmu_to_hub}
      SP_CLEAR_ERROR_CODES
      SP_HOME
  
    {% else %}
        RESPOND MSG="SP: LANE {params.LANE} loaded in the extruder. Please Unload lane first"
    {% endif %}
  
  {% else %}
    RESPOND TYPE=error MSG="SP: LANE parameter missing. Run again with LANE=<0...>"
  {% endif %}




#### ------ LOADING UNLOADING LANES ----------


### Main point of contact for filament changes during print time
[gcode_macro _SP_FILAMENT_CHANGE]
gcode:
  {% set purge = params.PURGE|default(0) | int %}
  {% if params.UNLOAD_LANE and params.LOAD_LANE %}
    {% set sp = printer['gcode_macro _SP_VARS'] %}
    
    SP_CLEAR_ERROR_CODES

    
    {% if printer.save_variables.variables.last_lane >=0 %} 
      _SP_REFRESH_STATE

      {% if purge > 0 %} 
        _SP_UNLOAD_LANE LANE={params.UNLOAD_LANE | int} PURGE={purge/3}   ## 1/3 of the full color flush purge to make sure we prime the meltzone for tip forming 
      {% else %}
        _SP_UNLOAD_LANE LANE={params.UNLOAD_LANE | int} PURGE=0
      {% endif %}

    {% endif %}
    
    _SP_REFRESH_STATE
    _SP_LOAD_LANE LANE={params.LOAD_LANE | int} PURGE={purge}
     
    SP_HOME
    
  {% else %}
    RESPOND TYPE=error MSG="SP: UNLOAD_LANE or LOAD_LANE parameters missing. Run again with UNLOAD_LANE=<0...> LOAD_LANE=<0...>"
    _SP_SET_EXIT_CODE CODE=1
  {% endif %}



[gcode_macro _SP_LOAD_LANE]
gcode:
  {% set sp = printer['gcode_macro _SP_VARS'] %}
  {% set rt = printer['gcode_macro _SP_VARS_RUNTIME'] %}
  {% set temp = params.TEMP | default(0) | int %}
  {% set force = params.FORCE | default(0) | int %}
  {% set purge = params.PURGE | default(0) | int %}
  
  {% if rt.exit_code == 0 %}

    {% if params.LANE%}
      RESPOND MSG="SP: Loading LANE {params.LANE} ..."
      
      _SP_REFRESH_STATE
      _SP_LOAD_EXTRUDER LANE={params.LANE | int} 
       
      _SP_REFRESH_STATE
      _SP_LOAD_HOTEND TEMP={TEMP} FORCE={force} PURGE={purge}
  
    {% else %}
      RESPOND TYPE=error MSG="SP: LANE parameter missing. Run again with LANE=<0...>"
      _SP_SET_EXIT_CODE CODE=1
    {% endif %}

 {% else %}
   _SP_SET_EXIT_CODE CODE=1
 {% endif %}



[gcode_macro _SP_UNLOAD_LANE]
gcode:
  {% set sp = printer['gcode_macro _SP_VARS'] %}
  {% set rt = printer['gcode_macro _SP_VARS_RUNTIME'] %}
  {% set temp = params.TEMP | default(0) | int %}
  {% set force = params.FORCE | default(0) | int %}
  {% set purge = params.PURGE | default(0) | int %}
 
  {% if rt.exit_code == 0 %}

    {% if params.LANE %}
      RESPOND MSG="SP: Unloading LANE {params.LANE} ..."
      
      _SP_REFRESH_STATE
      _SP_UNLOAD_HOTEND TEMP={temp} FORCE={force} PURGE={purge}

      _SP_REFRESH_STATE
      _SP_UNLOAD_EXTRUDER LANE={params.LANE | int}
  
     {% else %}
        RESPOND TYPE=error MSG="SP: LANE parameter missing. Run again with LANE=<0...>"
        _SP_SET_EXIT_CODE CODE=1
     {% endif %}

 {% else %}
   _SP_SET_EXIT_CODE CODE=1
 {% endif %}




#### ------ LOADING UNLOADING EXTRUDER ----------


### the macro below is broken into A B C parts to obtain refreshed variables from the sensor
[gcode_macro _SP_LOAD_EXTRUDER]
gcode:
  {% set sp = printer['gcode_macro _SP_VARS'] %}
  {% set rt = printer['gcode_macro _SP_VARS_RUNTIME'] %}
  
  RESPOND MSG="SP: Loading Extruder ..."
  {% if rt.exit_code == 0 %}
     _SP_SET_EXIT_CODE CODE=1

    {% if params.LANE %}
      {% if rt.is_filament_in != 1 %}
  
        # Move until filament sensor is triggered - homing move
        _SP_LANE_SELECT LANE={params.LANE | int}
        _SP_MOTOR STOP=2 SPEED={sp.speed_hub_to_extruder} DIST={sp.dist_hub_to_sensor*sp.overshoot_factor}
        SP_CLEAR_ERROR_CODES

        {% if sp.sensor_safe_move > 0 %}
          M400
          _SP_MOTOR STOP=0 SPEED={sp.speed_hub_to_extruder} DIST={sp.sensor_safe_move} ## safety move to ensure the endstop stays triggered
        {% endif %}

        _SP_REFRESH_STATE
        _SP_LOAD_EXTRUDER_B LANE={params.LANE}
  
      {% else %}
        RESPOND TYPE=error MSG="SP: Sensor detecting filament in. Please clear the HUB first"
        SP_HOME
      {% endif %}
      
    {% else %}
      RESPOND TYPE=error MSG="SP: LANE parameter missing. Run again with LANE=<0...>"
    {% endif %}
 {% else %}
   _SP_SET_EXIT_CODE CODE=1
 {% endif %}
 


[gcode_macro _SP_LOAD_EXTRUDER_B]
gcode:
  {% set sp = printer['gcode_macro _SP_VARS'] %}
  {% set rt = printer['gcode_macro _SP_VARS_RUNTIME'] %}

  {% if params.LANE %}
    {% if rt.is_filament_in == 1 %}

      RESPOND MSG="SP: First HUB stage loaded. Continuing with Extruder stage..."
      _SP_REFRESH_STATE
      _SP_LOAD_EXTRUDER_C LANE={params.LANE}

    {% else %}
      {% set retry_speed = sp.speed_hub_to_extruder * 0.8 %}
      RESPOND MSG="SP: Sensor not reached. Retrying..."
      _SP_MOTOR STOP=0 SPEED={retry_speed} DIST=-5 ## moving back a bit in case of jamming 
      _SP_MOTOR STOP=2 SPEED={retry_speed} DIST={sp.dist_hub_to_sensor*sp.overshoot_factor+5}   ## retrying 

      {% if sp.sensor_safe_move > 0 %}
        _SP_MOTOR STOP=0 SPEED={retry_speed} DIST={sp.sensor_safe_move}   ## safety move to ensure the endstop stays triggered
      {% endif %}

      _SP_REFRESH_STATE
      _SP_LOAD_EXTRUDER_C LANE={params.LANE}
    {% endif %}
  {% endif %}

 

[gcode_macro _SP_LOAD_EXTRUDER_C]
gcode:
  {% set sp = printer['gcode_macro _SP_VARS'] %}
  {% set rt = printer['gcode_macro _SP_VARS_RUNTIME'] %}
  
  M400

  {% if rt.exit_code == 0 %}
       _SP_SET_EXIT_CODE CODE=1
     
      {% if rt.is_filament_in == 1 %}
        _SP_LANE_SELECT LANE={rt.selected_lane}

        # Approach from sensor to extruder - minus the safety move done in the previous stage 
        _SP_MOTOR STOP=0 DIST={sp.dist_sensor_to_synced_move - sp.sensor_safe_move} SPEED={sp.speed_hub_to_extruder} 

        # Sync move for loading the extruder gears and parking filament post extruder
        M400
        {% set sync_dist = (sp.dist_sensor_to_extruder - sp.dist_sensor_to_synced_move) + (sp.dist_filament_park*1.2) %}  ## extra 20% filament_park distance buffer due to synced move losses   
        _SP_MOTOR STOP=0 SYNC=0 SPEED={sp.speed_sync_moves} ACCEL={sp.motor_accel} DIST={sync_dist}
        FORCE_MOVE STEPPER=extruder VELOCITY={sp.speed_sync_moves} ACCEL={sp.motor_accel} DISTANCE={sync_dist}

        {% if sp.debug == 1 %}
         RESPOND MSG="DEBUG: E LOAD SYNC - Dist: {sync_dist} mm"
        {% endif %}

        SP_HOME
               

        SAVE_VARIABLE VARIABLE=last_lane VALUE={rt.selected_lane}    ### LANE loaded and saved
        RESPOND MSG="SP: LANE {rt.selected_lane} loaded into the Extruder"
        SP_CLEAR_ERROR_CODES
        
      {% else %}
          RESPOND TYPE=error MSG="SP: Filament hasn't reached the sensor. Please check the printer and try again"
          _SP_MOTOR STOP=0 DIST=-2 # Safety Retract
          SP_HOME
      {% endif %}
          
 {% else %}
   _SP_SET_EXIT_CODE CODE=1
 {% endif %}



### the macro below is broken into A B C parts to obtain refreshed variables from the sensor for status check
[gcode_macro _SP_UNLOAD_EXTRUDER]
gcode:
  {% set sp = printer['gcode_macro _SP_VARS'] %}
  {% set rt = printer['gcode_macro _SP_VARS_RUNTIME'] %}
  RESPOND MSG="SP: Unloading Extruder ..."
  
  
  {% if rt.exit_code == 0 %}
     _SP_SET_EXIT_CODE CODE=1
  
    {% if params.LANE %}
      {% if rt.is_filament_in == 1 %} 

        # Start Synced moves
        M400 
        _SP_LANE_SELECT LANE={params.LANE | int}

        M400
        {% set sync_dist = sp.dist_filament_park*1.2 + sp.dist_sensor_to_extruder - sp.dist_sensor_to_synced_move %}   ## extra 20% filament_park distance buffer due to synced move losses   
        _SP_MOTOR STOP=0 SYNC=0 SPEED={sp.speed_sync_moves} ACCEL={sp.motor_accel} DIST=-{sync_dist+sp.backlash}   ## compensating for backlash due to compressed filament in the bowden
        FORCE_MOVE STEPPER=extruder VELOCITY={sp.speed_sync_moves} ACCEL={sp.motor_accel} DISTANCE=-{sync_dist} 

        {% if sp.debug == 1 %}
         RESPOND MSG="DEBUG: E UNLOAD SYNC - Dist: -{sync_dist} mm"
        {% endif %}

        # Outside the extruder towards the sensor - homing move
        M400
        _SP_MOTOR STOP=-2 SPEED={sp.speed_hub_to_extruder} ACCEL={sp.motor_accel} DIST=-{sp.dist_sensor_to_synced_move*sp.overshoot_factor} # Stop when clearing the sensor
        
        {% if sp.sensor_safe_move > 0 %}
          _SP_MOTOR STOP=0 SPEED={sp.speed_hub_to_extruder} DIST=-{sp.sensor_safe_move} ## safety move to ensure the endstop stays untriggered
        {% endif %}

        _SP_REFRESH_STATE
        _SP_UNLOAD_EXTRUDER_B LANE={params.LANE}
        
        
      {% else %}
          RESPOND MSG="SP: Filament is not detected inside the extruder. Unloading not needed"
          SAVE_VARIABLE VARIABLE=last_lane VALUE=-1
          SP_CLEAR_ERROR_CODES
          SP_HOME
      {% endif %}
      
    {% else %}
      RESPOND TYPE=error MSG="SP: LANE parameter missing. Run again with LANE=<0...>"
      _SP_SET_EXIT_CODE CODE=1
    {% endif %}

 {% else %}
   _SP_SET_EXIT_CODE CODE=1
 {% endif %}



[gcode_macro _SP_UNLOAD_EXTRUDER_B]
gcode:
  {% set sp = printer['gcode_macro _SP_VARS'] %}
  {% set rt = printer['gcode_macro _SP_VARS_RUNTIME'] %}

  {% if params.LANE %}
    {% if rt.is_filament_in != 1 %}   ## Unloading cleared the sensor
        RESPOND MSG="SP: Sensor cleared."
        _SP_REFRESH_STATE
        _SP_UNLOAD_EXTRUDER_C LANE={params.LANE}

    {% else %}
      {% set retry_speed = sp.speed_hub_to_extruder * 0.8 %}
      RESPOND MSG="SP: Sensor not cleared. Retrying..."
      _SP_MOTOR STOP=0 SPEED={retry_speed} DIST=5   ## moving back a bit in case of jamming 
      _SP_MOTOR STOP=-2 SPEED={retry_speed} DIST=-{sp.dist_sensor_to_synced_move*sp.overshoot_factor+5}  ## retrying 
      
      {% if sp.sensor_safe_move > 0 %}
        _SP_MOTOR STOP=0 SPEED={retry_speed} DIST=-{sp.sensor_safe_move}  ## safety move to ensure the endstop stays untriggered
      {% endif %}


      _SP_REFRESH_STATE
      _SP_UNLOAD_EXTRUDER_C LANE={params.LANE}
    {% endif %}
  {% endif %}



[gcode_macro _SP_UNLOAD_EXTRUDER_C]
gcode:
  {% set sp = printer['gcode_macro _SP_VARS'] %}
  {% set rt = printer['gcode_macro _SP_VARS_RUNTIME'] %}


  M400

  {% if params.LANE %}
    {% if rt.is_filament_in != 1 %}
    
      # Parking filament into the HUB
      _SP_MOTOR STOP=0 SPEED={sp.speed_hub_to_extruder} DIST=-{sp.dist_hub_to_sensor-sp.sensor_safe_move}
      RESPOND MSG="SP: Extruder unloaded"
      SAVE_VARIABLE VARIABLE=last_lane VALUE=-1   ## LANE unloaded and saved
      SP_CLEAR_ERROR_CODES

    {% else %}
      RESPOND TYPE=error MSG="SP: Sensor has not been cleared after retrying to unload. Please check the printer and try again"
      _SP_SET_EXIT_CODE CODE=1
      SP_HOME
      
    {% endif %}
  {% endif %}




#### ------ LOADING UNLOADING HOTEND ----------


[gcode_macro _SP_LOAD_HOTEND]
gcode: 
  {% set sp = printer['gcode_macro _SP_VARS'] %}
  {% set rt = printer['gcode_macro _SP_VARS_RUNTIME'] %}
  {% set force = params.FORCE | default(0) | int %}
  {% set hotend_loaded = printer.save_variables.variables.hotend_loaded | default(0) | int %}
  {% set purge = params.PURGE|default(0) | int %}
  RESPOND MSG="SP: Loading Hotend ..."
  
  {% if rt.exit_code == 0 %} 
    _SP_SET_EXIT_CODE CODE=1

    {% if rt.is_filament_in == 1 %}   
      {% if hotend_loaded == 0 or force == 1 %}   
      
        {% set extruder_temp = params.TEMP | default(0) | int %}
    
        SP_HOME
        _SP_HEAT_HOTEND TEMP={params.TEMP}
        
        {% set dist = sp.dist_extruder_to_meltzone - sp.dist_filament_park %}
        {% if sp.end_of_load_filament_move < 0 %}  ## if a negative end of load move is set, we subtract the distance
          {% set dist = dist - sp.end_of_load_filament_move|abs %}
        {% endif %}
        
        M83
        G0 E{dist*0.5} F{60*sp.speed_meltzone_loading*2}   ## approach hotzone - A - fast stage
        G0 E{dist*0.5} F{60*sp.speed_meltzone_loading}   ## approach hotzone - B - normal stage
      
        {% if sp.end_of_load_filament_move > 0 %}
          G0 E{sp.end_of_load_filament_move} F{60*sp.speed_meltzone_loading}    ## push extra distance at load
        {% endif %}

        {% if purge > 0 %}    ## Purge 
          G1 E{purge} F{60*sp.speed_meltzone_loading}
        {% endif %}
        
        M400
        RESPOND MSG="SP: Hotend loaded"
        SAVE_VARIABLE VARIABLE=hotend_loaded VALUE=1
        SET_GCODE_VARIABLE MACRO=_SP_VARS_RUNTIME VARIABLE=counter_changes VALUE={rt.counter_changes+1}
        SP_CLEAR_ERROR_CODES
  
      {% else %}
        RESPOND MSG="SP: Filament already loaded in the hotend. Continuing"
        SAVE_VARIABLE VARIABLE=hotend_loaded VALUE=1
        SP_CLEAR_ERROR_CODES
      {% endif %}

    {% else %}
      RESPOND TYPE=error MSG="SP: Filament is not detected inside the extruder."
      SAVE_VARIABLE VARIABLE=last_lane VALUE=-1
      SAVE_VARIABLE VARIABLE=hotend_loaded VALUE=0
      SP_HOME
    {% endif %}
    
 {% else %}
   _SP_SET_EXIT_CODE CODE=1
 {% endif %}



[gcode_macro _SP_UNLOAD_HOTEND]
gcode:
  {% set sp = printer['gcode_macro _SP_VARS'] %}
  {% set rt = printer['gcode_macro _SP_VARS_RUNTIME'] %}
  {% set force = params.FORCE | default(0) | int %}
  {% set purge = params.PURGE|default(0) | int %}
  {% set hotend_loaded = printer.save_variables.variables.hotend_loaded | default(0) | int %}
  
  RESPOND MSG="SP: Unloading Hotend ..." 
  {% if rt.exit_code == 0 %}
    {% if hotend_loaded == 1 or force == 1 %}    
      _SP_SET_EXIT_CODE CODE=1
      
      {% set extruder_temp = params.TEMP | default(0) | int %}
     
      {% if rt.is_filament_in == 1 or sp.enabled == 0 %}
        _SP_HEAT_HOTEND TEMP={params.TEMP}
        SP_HOME

        _SP_DISABLE_PA
        _SP_DISABLE_MPC
        
        {% if purge > 0 %}    ## Purge 
          G1 E{purge} F{60*sp.speed_meltzone_loading}
          G4 P2000    ## Wait 2 seconds to release pressure
          G0 E-{sp.pause_retract} F{35*60}   ## Simulate Pause retract
        {% endif %}
        
        M400
        _SP_TIP_FORM    ## Forming Tip, takes care of the park distance 
        _SP_RESTORE_PA
        M400
                
        RESPOND MSG="SP: Hotend unloaded"
        SAVE_VARIABLE VARIABLE=hotend_loaded VALUE=0 
        SP_CLEAR_ERROR_CODES

      {% else %}
        RESPOND MSG="SP: Filament already unloaded. Continuing"
        SAVE_VARIABLE VARIABLE=hotend_loaded VALUE=0  
        SP_CLEAR_ERROR_CODES
      {% endif %}
      
    {% else %}
        RESPOND MSG="SP: No filament detected inside the extruder. Skipping ..."
        SP_CLEAR_ERROR_CODES     
        SP_HOME
    {% endif %}

 {% else %}
   _SP_SET_EXIT_CODE CODE=1
 {% endif %}




#### ------ PAUSE RESUME ----------


# Refactored from Mainsail

[gcode_macro _SP_PAUSE]
gcode:
  {% set sp = printer['gcode_macro _SP_VARS'] %}
  {% set rt = printer['gcode_macro _SP_VARS_RUNTIME'] %}
  {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
  
  {% set lane = params.LANE | default(-1) | int %}
  {% set unload_lane = printer.save_variables.variables.last_lane | default(-1) | int %}
  {% set lanes_validated = 0 %}

  # Check extruder status
  {% set has_extruder = printer.toolhead.extruder != '' %}
  {% set can_extrude = True if not has_extruder else printer[printer.toolhead.extruder].can_extrude %}

  # Save current settings
  {% set restore = False if not has_extruder else params.RESTORE|default(1)|int == 1 %}     
  {% set temp = printer[printer.toolhead.extruder].target if has_extruder else 0 %}
  {% set fan_speed = printer['fan'].speed | default (0.0) %}
  {% set aux_speed = printer['fan_generic aux'].speed if client.has_aux_fan is defined else 0.0 %}  
  {% set velocity = printer['toolhead'].max_velocity %}  
  {% set accel = printer['toolhead'].max_accel %}  
  
  SET_GCODE_VARIABLE MACRO=_SP_RESUME VARIABLE=saved VALUE="{{'restore': restore, 'temp': temp, 'fan_speed': fan_speed, 'aux_speed': aux_speed, 'velocity': velocity, 'accel': accel}}"
  SAVE_GCODE_STATE NAME=_SP_FILAMENT_CHANGE

  ### Pausing
  SET_GCODE_VARIABLE MACRO=_SP_VARS_RUNTIME VARIABLE=sp_pause VALUE=1

  ### Saving positions
  M400
  {% set sx = printer.toolhead.position.x %}
  {% set sy = printer.toolhead.position.y %}
  {% set sz = printer.gcode_move.gcode_position.z %}
  {% set toolhead_z = printer.toolhead.position.z %}
  {% set z_diff = (sz-toolhead_z)| abs %}

  SET_GCODE_VARIABLE MACRO=_SP_RESUME VARIABLE=pos VALUE="{{'saved_x': sx, 'saved_y': sy, 'saved_z': sz}}"
  _SP_RESET_GCODE_MOTION

  {% if z_diff > 0.8 %}
    RESPOND TYPE=error MSG="SP: WARNING - gcode vs toolhead Z saved position greater than the warning threshold! ({z_diff} > 0.8)"
    RESPOND TYPE=error MSG="SP: This safety trigger might be caused by large bed mesh variations. PAUSING"
    PAUSE
  {% endif %}

  # Disable PA
  _SP_DISABLE_PA

  # Pause retract
  {% if sp.pause_retract != 0 and can_extrude == True %}
    M83
    G0 E-{sp.pause_retract|float|abs} F{60*35}   # Retract 
  {% endif %}

  # Pause fans
  {% if sp.pause_fan_speed | float >= 0.0 %}
    _SP_FANS SPEED={sp.pause_fan_speed | float}
  {% endif %}

  # Pause park
  {% if sp.use_park == 1 %}
    _SP_PAUSE_PARK
  {% endif %} 

  # Validate lane change
  {% if lane+1 <= sp.lanes and lane >= 0 %}  # is the next lane valid
      {% if unload_lane >= 0 and unload_lane+1 <= sp.lanes %}     # is the current lane valid
        RESPOND MSG="SP: ----- Filament Change: LANE {unload_lane} >>>> LANE {lane} ----- "
        RESPOND MSG=""
        {% set lanes_validated = 1 %}
      
      {% else %}
        RESPOND TYPE=error MSG="SP: Unknown current loaded LANE {unload_lane}. Use SP_FORCE_SET_LANE LANE=<0...>, SP_CLEAR_ERROR_CODES, SP_UNLOAD_LANE, SP_LOAD_LANE and finally RESUME to manually change the filament. "
      {% endif %}

  {% else %}
    RESPOND TYPE=error MSG="SP: Invalid change to LANE {lane}"
  {% endif %}

 
  # Main filament change routine
  {% if lanes_validated == 1 %}

     # check if user macro can be executed
     {% if rt.user_macros_executed == 0 %}
      RESPOND MSG='SP: Running User Pause Macro'
      SAVE_GCODE_STATE NAME=user_macro
      _SP_BEFORE_CHANGE
      SET_GCODE_VARIABLE MACRO=_SP_VARS_RUNTIME VARIABLE=user_macros_executed VALUE=1
      SET_GCODE_VARIABLE MACRO=_SP_RESUME VARIABLE=unloading_lane VALUE={unload_lane}
      SET_GCODE_VARIABLE MACRO=_SP_RESUME VARIABLE=loading_lane VALUE={lane}
      RESTORE_GCODE_STATE NAME=user_macro
    {% endif %}
    
    # Perform filament change
    _SP_FILAMENT_CHANGE UNLOAD_LANE={unload_lane} LOAD_LANE={lane}   # Main change macro
    _SP_RESUME
    
  {% else %}
    RESPOND TYPE=error MSG="SP: Print PAUSED and filament change interrupted due to previous errors. Please fix the issues before resuming"
    RESPOND TYPE=error MSG="SP: Pending unloading LANE {printer.save_variables.variables.last_lane} and loading LANE {lane}"
    
    SP_CLEAR_ERROR_CODES
    PAUSE
  {% endif %}



[gcode_macro _SP_RESUME]
variable_saved: {'restore': False, 'temp': 0, 'fan_speed': 0, 'aux_speed': 0, 'velocity': 200, 'accel': 5000 }
variable_pos: {'saved_x': -1.0, 'saved_y': -1.0, 'saved_z': -1.0 }
variable_loading_lane: -1
variable_unloading_lane: -1
variable_restore_idle_timeout: 0
variable_idle_state: False
gcode:

  ##### Get user parameters or use default #####
  {% set sp = printer['gcode_macro _SP_VARS'] %}
  {% set rt = printer['gcode_macro _SP_VARS_RUNTIME'] %}
  
  {% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
  {% set sp_move = sp.park_speed|default(velocity) %}
  {% set can_extrude = True if printer.toolhead.extruder == ''           # no extruder defined in config
                  else printer[printer.toolhead.extruder].can_extrude %} # status of active extruder
                
  {% set change_validated = 0 %}

  {% if rt.exit_code == 0 %}

      # Restore Saved Settings
      {% if saved.restore and rt.sp_pause == 1 %}
          RESPOND MSG="SP: Restoring previous settings"

          # Restore temp
          {% if saved.temp != printer['extruder'].target %}
            RESPOND TYPE=echo MSG="SP: Temperature target : {saved.temp}"
            M109 S{saved.temp}
          {% endif %}

          # Restore speeds
          SET_VELOCITY_LIMIT VELOCITY={saved.velocity} ACCEL={saved.accel} 
          
          # Restore fans
          M106 S{saved.fan_speed*255}
          {% if saved.aux_speed > 0 %}
            SET_FAN_SPEED FAN=aux SPEED={saved.aux_speed}
          {% endif %}

          # Setting change_validated for sp_pause
          {% set change_validated = 1 %}
          
      {% elif can_extrude %}
        {% set change_validated = 1 %}     
     
        SET_GCODE_VARIABLE MACRO=_SP_VARS_RUNTIME VARIABLE=counter_pauses VALUE={rt.counter_pauses+1} # Counting manual pauses
        
      {% else %} 
        RESPOND TYPE=error MSG="SP: RESUME interrupted. The hotend is not hot enough, please heat up again and then RESUME print"
      {% endif %}

  {% endif %}


  # Main resume routine
  {% if change_validated != 1 %}
    RESPOND TYPE=error MSG="SP: Cannot RESUME print due to previous errors. Please fix the issues or run SP_CLEAR_ERROR_CODES before trying RESUME "
    RESPOND TYPE=error MSG="SP: PAUSED. Pending LANE {loading_lane}, unloading LANE {unloading_lane}"
    SET_GCODE_VARIABLE MACRO=_SP_VARS_RUNTIME VARIABLE=counter_errors VALUE={rt.counter_errors+1}
    PAUSE
    
  {% else %}    
    # Check if the user macro was previously executed
    {% if rt.user_macros_executed == 1 %}
      RESPOND MSG='SP: Running User Resume Macro'
      SAVE_GCODE_STATE NAME=user_macro
      _SP_AFTER_CHANGE
      SET_GCODE_VARIABLE MACRO=_SP_VARS_RUNTIME VARIABLE=user_macros_executed VALUE=0
      RESTORE_GCODE_STATE NAME=user_macro
    {% endif %}
    
    # Execute pause retract
    {% if sp.pause_retract != 0 and can_extrude == True %}
      M83
      G0 E{sp.pause_retract} F{3000}   # Detract
    {% endif %}
    
    # Messaging done
    RESPOND MSG="SP: ----- Filament Changed: LANE {unloading_lane} >>>> LANE {printer.save_variables.variables.last_lane} ----- "
    RESPOND MSG=""
    RESTORE_GCODE_STATE NAME=_SP_FILAMENT_CHANGE
   
    # Restoring Z position
    _SP_RESET_GCODE_MOTION

    {% if pos.saved_z | float > 0 %}
      G1 Z{pos.saved_z}
      G1 X{pos.saved_x} Y{pos.saved_y} F{60*sp.park_speed*0.5}
      SET_GCODE_VARIABLE MACRO=_SP_RESUME VARIABLE=pos VALUE="{{'saved_x': -1.0, 'saved_y': -1.0, 'saved_z': -1.0 }}"
    {% else %}
      RESPOND TYPE=error MSG="SP: Cannot restore Z position. Saved Z value lower than 0"
      PAUSE    
    {% endif %}

    SET_GCODE_VARIABLE MACRO=_SP_VARS_RUNTIME VARIABLE=sp_pause VALUE=0    
 {% endif %}



[gcode_macro _SP_PAUSE_PARK]
gcode:
  {% set sp = printer['gcode_macro _SP_VARS'] %}
  {% set park_x  = sp.park_x %}
  {% set park_y  = sp.park_y %}
  {% set park_dz = sp.park_dz| abs %}
  {% set velocity = sp.park_speed %}
  {% set accel = sp.park_accel %}

  ##### get config and toolhead values #####
  {% set origin    = printer.gcode_move.homing_origin %}
  {% set act       = printer.gcode_move.gcode_position %}
  {% set max       = printer.toolhead.axis_maximum %}
                
  ##### define park position #####
  {% set z_min = params.Z_MIN|default(0)|float %}
  {% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
 
             
  ##### moves #####

  {% if "xyz" in printer.toolhead.homed_axes %}
    SET_VELOCITY_LIMIT VELOCITY={velocity} ACCEL={accel} 
    G90
    G1 Z{z_park}
    G1 X{park_x} Y{park_y} F{60*velocity}
    _SP_RESET_GCODE_MOTION
  {% else %}
    RESPOND TYPE=error MSG='PARK: Printer not homed'
  {% endif %}

  


#### ------ LOW LEVEL CORE FUNCTIONS ----------


[gcode_macro _SP_HEAT_HOTEND]
gcode:
  {% set sp = printer['gcode_macro _SP_VARS'] %}
  
  {% set extruder_temp = params.TEMP | default(0) | int %}
  {% if extruder_temp == 0 %}
    {% if printer['extruder'].target >= 200 %}
      {% set extruder_temp = printer['extruder'].target | int %}
    {% else %}
      {% set extruder_temp = sp.min_loading_temp | int %}
      RESPOND MSG="SP: Heating up hotend to {sp.min_loading_temp}C"
    {% endif %}
  {% endif %}
  M109 S{extruder_temp}      



[gcode_macro _SP_FANS]
gcode:
  {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
  {% set speed = params.SPEED | default (0.0) | float %}

  
  {% if speed != 0 %}
    M106 S{speed*255}
  {% else %}
    M106 S0
  {% endif %}
  
  {% if client.has_aux_fan %}          # force aux fan off
    {% if client.has_aux_fan == True %}
      SET_FAN_SPEED FAN=aux SPEED=0
    {% endif %}
  {% endif %}



[gcode_macro _SP_DISABLE_PA]
gcode:
    {% set sp = printer['gcode_macro _SP_VARS'] %}
    
    {% if printer.extruder.pressure_advance > 0 and sp.turn_pa_off == 1 %}
      RESPOND MSG="SP: Disabling PA"
      SET_GCODE_VARIABLE MACRO=_SP_RESTORE_PA VARIABLE=pa VALUE={printer.extruder.pressure_advance | float}
      SET_PRESSURE_ADVANCE ADVANCE=0
    {% endif %}



[gcode_macro _SP_RESTORE_PA]
variable_pa: -1.0
gcode:
  {% set sp = printer['gcode_macro _SP_VARS'] %}
  RESPOND MSG="SP: Restoring PA"
  {% if printer["gcode_macro _SP_RESTORE_PA"].pa > 0 and sp.turn_pa_off == 1 %}
    SET_PRESSURE_ADVANCE ADVANCE={printer["gcode_macro _SP_RESTORE_PA"].pa}
  {% endif %}



[gcode_macro _SP_DISABLE_MPC]
gcode:
    {% set sp = printer['gcode_macro _SP_VARS'] %}
    
    {% if sp.turn_mpc_off == 1 %}
      RESPOND MSG="SP: Disabling MPC feed forward"
      MPC_SET HEATER=extruder FILAMENT_DENSITY=1.24 FILAMENT_HEAT_CAPACITY=0  # disabling feed forward heating boost - slicer resets MPC filament parameters on resume
    {% endif %}



[gcode_macro _SP_SHOW_STATISTICS]
gcode:
  {% set rt = printer['gcode_macro _SP_VARS_RUNTIME'] %}

  RESPOND MSG="_____"
  RESPOND MSG="   Errors           : {rt.counter_errors}"
  RESPOND MSG="   Manual Pauses    : {rt.counter_pauses}"
  RESPOND MSG="   Filament Changes : {rt.counter_changes}"
  RESPOND MSG="_____   SP Statistics  _____" 
  RESPOND MSG=""
  



[gcode_macro SP_HOME]
gcode:
  {% set sp = printer['gcode_macro _SP_VARS'] %}
  {% set rt = printer['gcode_macro _SP_VARS_RUNTIME'] %}

  {% if sp.enabled %}
    M400
    SET_SERVO SERVO=sp_servo ANGLE={sp.angle_home}
    G4 P{1000*sp.switch_time}
    M400
  
    SET_GCODE_VARIABLE MACRO=_SP_VARS_RUNTIME VARIABLE=commanded_angle VALUE={sp.angle_home}
    SET_GCODE_VARIABLE MACRO=_SP_VARS_RUNTIME VARIABLE=selected_lane VALUE=-1
    
    _SP_OFF
  {% endif %}



[gcode_macro _SP_OFF]
gcode:
  {% set sp = printer['gcode_macro _SP_VARS'] %}

  MANUAL_STEPPER STEPPER=sp_motor ENABLE=0
  SET_SERVO servo=sp_servo WIDTH=0

  {% if sp.debug == 1 %}
    RESPOND MSG="SP: Servo and Motor OFF"
  {% endif %}
  


[gcode_macro _SP_RESET_GCODE_MOTION]
gcode:
    G90
    M83
    G92 E0
    M400


[gcode_macro _SP_RESET_VARIABLES]
gcode:
  SET_GCODE_VARIABLE MACRO=_SP_RESUME VARIABLE=pos VALUE="{{'saved_x': -1.0, 'saved_y': -1.0, 'saved_z': -1.0 }}"
  SET_GCODE_VARIABLE MACRO=_SP_VARS_RUNTIME VARIABLE=user_macros_executed VALUE=0
  SET_GCODE_VARIABLE MACRO=_SP_VARS_RUNTIME VARIABLE=sp_pause VALUE=0
  SET_GCODE_VARIABLE MACRO=_SP_VARS_RUNTIME VARIABLE=active VALUE=1
  SET_GCODE_VARIABLE MACRO=_SP_VARS_RUNTIME VARIABLE=counter_pauses VALUE=0
  SET_GCODE_VARIABLE MACRO=_SP_VARS_RUNTIME VARIABLE=counter_changes VALUE=0
  SET_GCODE_VARIABLE MACRO=_SP_VARS_RUNTIME VARIABLE=counter_errors VALUE=0


[gcode_macro _SP_REFRESH_STATE]
gcode:
  M400
  {% set filament_in = 1 if printer['gcode_button sp_sensor'].state == 'PRESSED' else 0 %}
  SET_GCODE_VARIABLE MACRO=_SP_VARS_RUNTIME VARIABLE=is_filament_in VALUE={filament_in}



[gcode_macro _SP_SET_EXIT_CODE]
gcode:
  SET_GCODE_VARIABLE MACRO=_SP_VARS_RUNTIME VARIABLE=exit_code VALUE={params.CODE|int}



[gcode_macro SP_CLEAR_ERROR_CODES]
gcode:
  SET_GCODE_VARIABLE MACRO=_SP_VARS_RUNTIME VARIABLE=exit_code VALUE=0



[gcode_macro _CHECK_SETTINGS_VERSION_SP]
gcode:
  {% set sp = printer['gcode_macro _SP_VARS'] %}
  {% set rt = printer['gcode_macro _SP_VARS_RUNTIME'] %}
  {% if rt.required_version > sp.version %}
    RESPOND TYPE=error MSG="WARNING: sp_mmu_code.cfg requires an updated sp_mmu.cfg v({rt.required_version}) settings file. Please review the latest configuration changes and update your sp_mmu.cfg."
  {% endif %}



[gcode_macro _SP_LANE_SELECT]
gcode:
    {% set sp = printer['gcode_macro _SP_VARS'] %}
    {% set rt = printer['gcode_macro _SP_VARS_RUNTIME'] %}
    {% set lane = params.LANE | int %}

    {% if lane+1 <= sp.lanes and lane >= 0 %}
      {% if lane != rt.selected_lane %}

        {% if sp.angles[lane] < rt.commanded_angle and sp.home_before_downchange == 1 %}  
          SP_HOME
        {% endif %}

        RESPOND MSG="SP: Selecting Lane {lane}"
        _SP_SERVO ANGLE={sp.angles[lane]}
        SET_GCODE_VARIABLE MACRO=_SP_VARS_RUNTIME VARIABLE=selected_lane VALUE={lane}
      {% endif %}

    {% else %}
      RESPOND MSG="SP: Invalid lane: {lane}"
    {% endif %}



[gcode_macro _SP_SERVO]
gcode:
  SET_GCODE_VARIABLE MACRO=_SP_VARS_RUNTIME VARIABLE=commanded_angle VALUE={params.ANGLE|float}

  {% set sp = printer['gcode_macro _SP_VARS'] %}
  {% set angle = params.ANGLE|float + sp.angle_offset|float %}
  {% set angle = [angle, printer.configfile.settings['servo sp_servo'].maximum_servo_angle] | min %}
  
  SET_SERVO SERVO=sp_servo ANGLE={angle}
  G4 P{1000*sp.switch_time}  ## waiting for servo movement to end
  M400

  {% if sp.debug == 1 %}
    RESPOND MSG="DEBUG: SERVO angle: {params.ANGLE | float} deg ({angle})"
  {% endif %}



[gcode_macro _SP_MOTOR]
gcode:
  {% set sp = printer['gcode_macro _SP_VARS'] %}
  {% set rt = printer['gcode_macro _SP_VARS_RUNTIME'] %}
  
  {% set speed = params.SPEED| default(sp.motor_speed) | int %}
  {% set accel = params.ACCEL| default(sp.motor_accel) | int %}
  {% set dist = params.DIST| default(0) | float %}
  {% set sync = params.SYNC| default(1) | int %}
  {% set stop = params.STOP| default(2) | int %}
  {% set dir = 1 if dist > 0 else -1 %}

  ### Backlash compensation  
  {% if rt.selected_lane != rt.motor_last_lane and  dir > 0 %} # if lanes changed and the new travel direction is positive - in general a lane is retracted before switching so we are assuming backlash since we don't track the last direction per lane
      {% set dist = dist + sp.backlash %}
    
  {% elif dir != rt.motor_last_direction %}  # if the lane is the same and the direction is opposite, then we apply backlask compensation
      {% if dir > 0 %} 
        {% set dist = dist + sp.backlash %}

      {% else %}
        {% set dist = dist - sp.backlash %}
      {% endif %}       
  {% endif %}

  ### Speed compensation to keep move times constant
  {% set speed = speed * (dist|abs / params.DIST|float|abs) %}


  SET_GCODE_VARIABLE MACRO=_SP_VARS_RUNTIME VARIABLE=motor_last_direction VALUE={dir}
  SET_GCODE_VARIABLE MACRO=_SP_VARS_RUNTIME VARIABLE=motor_last_lane VALUE={rt.selected_lane}

  {% if sp.debug == 1 %}
    RESPOND MSG="DEBUG: SP MOTOR - Dist: {params.DIST} mm ({dist})"
  {% endif %}


   ### Extrusion multiplier and speed compensation
  {% if rt.selected_lane >= 0 %}
    {% if sp.lane_em[rt.selected_lane] %}
      {% set dist = dist * sp.lane_em[rt.selected_lane] %}
      {% set speed = speed * sp.lane_em[rt.selected_lane] %}
    {% endif %}
  {% endif %}

 
  ### Splitting MANUAL_STEPPER commands due to STOP_ON_ENDSTOP param behaviour
  {% if stop == 0 %}
    MANUAL_STEPPER STEPPER=sp_motor ENABLE=1 SET_POSITION=0 SPEED={speed} ACCEL={accel} MOVE={dist} SYNC={sync}
  {% else %}
    MANUAL_STEPPER STEPPER=sp_motor ENABLE=1 SET_POSITION=0 SPEED={speed} ACCEL={accel} MOVE={dist} SYNC={sync} STOP_ON_ENDSTOP={stop}
  {% endif %}




#### ------ TIP FORMING ----------


[gcode_macro _SP_TIP_FORMING]
gcode:
    ## Configuration derived variables
    {% set sp = printer['gcode_macro _SP_VARS'] %}
    {% set defaults = printer['gcode_macro _SP_TIP_FORMING_DEFAULTS'] %}
    {% set dist_extruder_to_meltzone = params.DIST_EXTRUDER_TO_MELTZONE|default(sp.dist_extruder_to_meltzone) | float %} 
    {% set dist_filament_park = params.DIST_FILAMENT_PARK|default(sp.dist_filament_park) | float %} 
    
    ## Tip Forming Variables (automatically assigned from defaults)
    {% set pause_push_dist = defaults.pause_push_dist|float %}
    {% set pause_push_speed = defaults.pause_push_speed|float %}
    {% set cooldown_dist = defaults.cooldown_dist|float %}
    {% set cooldown_speed = defaults.cooldown_pull_speed|float %}
    {% set cooldown_pause = defaults.cooldown_pause|float %}
    {% set dip_melt_gap = defaults.dip_melt_gap|float %}
    {% set dip_speed = defaults.dip_speed|float %}
    {% set dip_pause = defaults.dip_pause|float %}
    {% set park_speed = defaults.park_speed|float %}

    ## Tip Forming ##
    M400
    M83
    RESPOND MSG="SP: Tip Forming"

    {% set park_distance = dist_extruder_to_meltzone - dist_filament_park %}  # Measured from the meltzone

    ## Post Pause Retract
    G0 E{pause_push_dist} F{pause_push_speed*60}           ## Push post pause retract                                 

    ## Cooldown
    G0 E-{cooldown_dist} F{cooldown_speed*60}              ## Tip form pull long                                  
    G4 P{cooldown_pause*1000}                              ## Tip form pause
    G0 E{cooldown_dist/2} F{cooldown_speed*60*0.2}         ## Tip form push short
    G0 E-{cooldown_dist/4} F{cooldown_speed*60*0.4}        ## Tip form pull short

    ## Dip
    G0 E{cooldown_dist*0.75-dip_melt_gap} F{dip_speed*60}  ## Dip tip                                                           
    G0 E{dip_melt_gap*0.5} F{(dip_melt_gap/dip_pause)*60}  ## Dip pause. Not realy pause, but a slow crawling moving

    ## Final fast retract park
    G0 E-{park_distance-dip_melt_gap*0.5} F{park_speed*60}  ## Reaching required park position for the unload extruder stage



[gcode_macro _SP_UPDATE_TIP_FORMING_VALUES]
gcode:
    ## Fetch current defaults
    {% set defaults = printer['gcode_macro _SP_TIP_FORMING_DEFAULTS'] %}

    ## Parameters with current defaults
    {% set pause_push_dist = params.PAUSE_PUSH_DIST|default(defaults.pause_push_dist) | float %}
    {% set pause_push_speed = params.PAUSE_PUSH_SPEED|default(defaults.pause_push_speed) | float %}
    {% set cooldown_dist = params.COOLDOWN_DIST|default(defaults.cooldown_dist) | float %}
    {% set cooldown_speed = params.COOLDOWN_PULL_SPEED|default(defaults.cooldown_pull_speed) | float %}
    {% set cooldown_pause = params.COOLDOWN_PAUSE|default(defaults.cooldown_pause) | float %}
    {% set dip_melt_gap = params.DIP_MELT_GAP|default(defaults.dip_melt_gap) | float %}
    {% set dip_speed = params.DIP_SPEED|default(defaults.dip_speed) | float %}
    {% set dip_pause = params.DIP_PAUSE|default(defaults.dip_pause) | float %}
    {% set park_speed = params.PARK_SPEED|default(defaults.park_speed) | float %}

    ## Update variables in _SP_TIP_FORMING_DEFAULTS
    SET_GCODE_VARIABLE MACRO=_SP_TIP_FORMING_DEFAULTS VARIABLE=pause_push_dist VALUE={pause_push_dist}
    SET_GCODE_VARIABLE MACRO=_SP_TIP_FORMING_DEFAULTS VARIABLE=pause_push_speed VALUE={pause_push_speed}
    SET_GCODE_VARIABLE MACRO=_SP_TIP_FORMING_DEFAULTS VARIABLE=cooldown_dist VALUE={cooldown_dist}
    SET_GCODE_VARIABLE MACRO=_SP_TIP_FORMING_DEFAULTS VARIABLE=cooldown_pull_speed VALUE={cooldown_speed}
    SET_GCODE_VARIABLE MACRO=_SP_TIP_FORMING_DEFAULTS VARIABLE=cooldown_pause VALUE={cooldown_pause}
    SET_GCODE_VARIABLE MACRO=_SP_TIP_FORMING_DEFAULTS VARIABLE=dip_melt_gap VALUE={dip_melt_gap}
    SET_GCODE_VARIABLE MACRO=_SP_TIP_FORMING_DEFAULTS VARIABLE=dip_speed VALUE={dip_speed}
    SET_GCODE_VARIABLE MACRO=_SP_TIP_FORMING_DEFAULTS VARIABLE=dip_pause VALUE={dip_pause}
    SET_GCODE_VARIABLE MACRO=_SP_TIP_FORMING_DEFAULTS VARIABLE=park_speed VALUE={park_speed}

    ## Notify
    RESPOND MSG="SP: Updated TIP FORMING values"



[gcode_macro SP_TEST_MANUAL_TIP_FORMING]
gcode:
    ## Configuration derived variables
    {% set sp = printer['gcode_macro _SP_VARS'] %}
    {% set pause_retract_dist = sp.pause_retract | float %}
    
    ## Helper variables for extruder unload
    {% set load_dist = sp.dist_extruder_to_meltzone*1.2 | float %} 
    {% set load_speed = sp.speed_meltzone_loading | float %} 
    {% set sync_dist =  sp.dist_filament_park + sp.dist_sensor_to_extruder - sp.dist_sensor_to_synced_move | float %} 
    {% set sync_speed = sp.speed_sync_moves | float %}
    {% set sync_accel = sp.motor_accel | float %}
    {% set final_unload_distance = 60 | float %} 
    {% set final_unload_speed = sp.speed_hub_to_extruder | float %}


    ## Tip Forming Variables
    {% set pause_push_dist = params.PAUSE_PUSH_DIST|default(0.5) | float %}
    {% set pause_push_speed = params.PAUSE_PUSH_SPEED|default(30) | float %}
    {% set cooldown_dist = params.COOLDOWN_DIST|default(5) | float %}
    {% set cooldown_speed = params.COOLDOWN_PULL_SPEED|default(70) | float %}
    {% set cooldown_pause = params.COOLDOWN_PAUSE|default(0) | float %}
    {% set dip_melt_gap = params.DIP_MELT_GAP|default(2) | float %}
    {% set dip_speed = params.DIP_SPEED|default(30) | float %}
    {% set dip_pause = params.DIP_PAUSE|default(2) | float %}
    {% set park_speed = params.PARK_SPEED|default(130) | float %}

    ## Updating Tip Forming Defaults
    SET_GCODE_VARIABLE MACRO=_SP_TIP_FORMING_DEFAULTS VARIABLE=pause_push_dist VALUE={pause_push_dist}
    SET_GCODE_VARIABLE MACRO=_SP_TIP_FORMING_DEFAULTS VARIABLE=pause_push_speed VALUE={pause_push_speed}
    SET_GCODE_VARIABLE MACRO=_SP_TIP_FORMING_DEFAULTS VARIABLE=cooldown_dist VALUE={cooldown_dist}
    SET_GCODE_VARIABLE MACRO=_SP_TIP_FORMING_DEFAULTS VARIABLE=cooldown_pull_speed VALUE={cooldown_speed}
    SET_GCODE_VARIABLE MACRO=_SP_TIP_FORMING_DEFAULTS VARIABLE=cooldown_pause VALUE={cooldown_pause}
    SET_GCODE_VARIABLE MACRO=_SP_TIP_FORMING_DEFAULTS VARIABLE=dip_melt_gap VALUE={dip_melt_gap}
    SET_GCODE_VARIABLE MACRO=_SP_TIP_FORMING_DEFAULTS VARIABLE=dip_speed VALUE={dip_speed}
    SET_GCODE_VARIABLE MACRO=_SP_TIP_FORMING_DEFAULTS VARIABLE=dip_pause VALUE={dip_pause}
    SET_GCODE_VARIABLE MACRO=_SP_TIP_FORMING_DEFAULTS VARIABLE=park_speed VALUE={park_speed}


    ## Start
    RESPOND MSG="SP: Note: A filament strand should be pushed against the extruder gears"
    RESPOND MSG="SP: Starting Tip Forming Test"

    {% if printer[printer.toolhead.extruder].can_extrude == True %}
      _SP_DISABLE_PA
      _SP_DISABLE_MPC
      M83         
     

      ### Loading filament
      RESPOND MSG="SP: Loading Hotend"
      G0 E{load_dist/2} F{final_unload_speed*60}    ## Loading hotend
      G0 E{load_dist/2} F{load_speed*60}      ## Loading meltzone
      G4 P500 


      #### Simulating print, pause and initial retract to get more accurate tip forming samples ####
      RESPOND MSG="SP: Simulating print"
      G0 E7 F{4*30}                        ## Printing - 7mm of prime
      G4 P2000                             ## Filament change pause 
      G0 E-{pause_retract_dist} F{35*60}   ## Pause retract


      #### Tip Forming ####
      _SP_TIP_FORMING


      #### Done - Unloading extruder ####
      M400
      RESPOND MSG="SP: Unloading extruder"
      G4 P1000 ## Simulating servo movement pause
      FORCE_MOVE STEPPER=extruder VELOCITY={sync_speed} ACCEL={sync_accel} DISTANCE=-{sync_dist}   ## Simulating sync extruder unloading move
      G0 E-{final_unload_distance} F{final_unload_speed*60}  ## Unloading the filament out of the extruder gears to be picked by hand and inspected

      M400
      RESPOND MSG="SP: DONE! Pleast remove the filament gently and inspect the tip"
      RESPOND MSG=""
    
    {% else %}
      RESPOND MSG="SP: Please heat up the hotend"
    {% endif %}




#### ------ SENSOR EVENTS ----------


[gcode_macro _SP_BUTTON_IN]
gcode:
  SET_GCODE_VARIABLE MACRO=_SP_VARS_RUNTIME VARIABLE=is_filament_in VALUE=1
  # RESPOND MSG="BUTTON IN"

[gcode_macro _SP_BUTTON_OUT]
gcode:
  SET_GCODE_VARIABLE MACRO=_SP_VARS_RUNTIME VARIABLE=is_filament_in VALUE=0
  # RESPOND MSG="BUTTON OUT"

[gcode_macro _SP_SENSOR_IN]
gcode:
  # SET_GCODE_VARIABLE MACRO=_SP_VARS_RUNTIME VARIABLE=is_filament_in VALUE=1
  # RESPOND MSG="RUNOUT IN"

[gcode_macro _SP_SENSOR_OUT]
gcode:
  # SET_GCODE_VARIABLE MACRO=_SP_VARS_RUNTIME VARIABLE=is_filament_in VALUE=0
  # RESPOND MSG="RUNOUT OUT"




#### ------ TESTS ----------


## Example: SP_TEST_SERVO ANGLE=50 
[gcode_macro SP_TEST_SERVO]
gcode:
  _SP_SERVO ANGLE={params.ANGLE|float}
  RESPOND MSG="SP: Angle set to: {params.ANGLE|float}"


## Example: SP_TEST_MMU TIMES=2
[gcode_macro SP_TEST_MMU]
gcode:
  RESPOND MSG="SP: Testing MMU movements ..."
  {% set times = params.TIMES|default(2) | int %}
  {% set dist = params.DISTANCE|default(30) | int %}
  {% for i in range(times) %}
    _SP_TEST DISTANCE={dist}
  {%endfor%}
  SP_HOME


[gcode_macro _SP_TEST]
gcode:
  {% set sp = printer['gcode_macro _SP_VARS'] %}
  {% set dist = params.DISTANCE| default(30) | int %}
  {% for i in range(sp.lanes) %}
      RESPOND MSG="SP: Servo commanded to: {sp.angles[i]}"
      _SP_SERVO ANGLE={sp.angles[i]}
      _SP_MOTOR DIST={dist} STOP=0
      _SP_MOTOR DIST=-{dist} STOP=0
  {% endfor %}


## Example: SP_TEST_LOAD_UNLOAD_EXTRUDER LANE=0
[gcode_macro SP_TEST_LOAD_UNLOAD_EXTRUDER]
gcode:

  {% if params.LANE %}
  RESPOND MSG="SP: Testing loading and unloading LANE {params.LANE} between the HUB and the Extruder ..."
     SP_CLEAR_ERROR_CODES
    _SP_LOAD_EXTRUDER LANE={params.LANE | int}
    _SP_UNLOAD_EXTRUDER LANE={params.LANE | int}
  
  {% else %}
    RESPOND TYPE=error MSG="SP: LANES parameters missing. Run again with LANE=<0...>"
  {% endif %}




#### ------ RUNTIME VARIABLES ----------


[gcode_macro _SP_VARS_RUNTIME]

# Runtime - Do not set
variable_required_version: 0.6      # required settings file version
variable_active: 0                  # mmu initialised
variable_commanded_angle: 0         # keeping track of the commanded servo angle
variable_selected_lane: -1          # -1 parked
variable_is_filament_in: -1         # sensor status
variable_exit_code: 0               # last action exit code | 0 = success,  1 = error, 10 success with warning
variable_motor_last_direction: -1   # tracks last move direction for backlash compensation
variable_motor_last_lane: -1        # tracks last selected lane for backlash compensation
variable_user_macros_executed: 0    # tracks user macros execution
variable_sp_pause: 0                # tracks if sp pause was executed
variable_counter_pauses: 0
variable_counter_changes: 0
variable_counter_errors: 0
gcode:



#### ------ PLAYGROUND ----------